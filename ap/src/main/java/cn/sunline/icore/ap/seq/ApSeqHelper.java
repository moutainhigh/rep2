package cn.sunline.icore.ap.seq;
import cn.sunline.edsp.microcore.plugin.IProcess;
import cn.sunline.edsp.microcore.util.ExtensionUtil;
import cn.sunline.icore.ap.spi.ISeqCheckBitStrategy;
import cn.sunline.icore.sys.errors.ApBaseErr;
import cn.sunline.ltts.biz.global.CommUtil;

public class ApSeqHelper {
	/**
	 * 
	 * @Author tsichang
	 *         <p>
	 *         <li>Apr 22, 2018-6:53:59 PM</li>
	 *         <li>功能说明：生成校验位</li>
	 *         </p>
	 * @param strategyId
	 * 				检验位生成方案
	 * @param orgSeq
	 * 				原始流水
	 * @return
	 */
	public static String genCheckBit(String strategyId, String orgSeq) {
		return new CheckBitGenerator(strategyId, orgSeq).getCheckBit();
	}
	
	private static class CheckBitGenerator implements IProcess<ISeqCheckBitStrategy> {
		private String orgSeq;
		private String strategyId;
		private String checkBit;
		
		private CheckBitGenerator(String strategyId, String orgSeq) {
			this.strategyId = strategyId;
			this.orgSeq = orgSeq;
		}
		
		@Override
		public void run(ISeqCheckBitStrategy strategy) {
			this.checkBit = strategy.genCheckBit(orgSeq);
		}
		
		public String getCheckBit() {
			ExtensionUtil.executeExtensionPoint(ISeqCheckBitStrategy.POINT, this, new String[]{strategyId});
			
			if (null == this.checkBit) {
				// There is no check bit generate strategy named by [${strategyId}]
				throw ApBaseErr.ApBase.E0108(strategyId);
			}
			else if (CommUtil.isNull(this.checkBit)) {
				// The check bit is empty generated by [${strategyId}], original sequence is [${orgSeq}]
				throw ApBaseErr.ApBase.E0109(strategyId, orgSeq);
			}
			
			return this.checkBit;
		}
	}
}
